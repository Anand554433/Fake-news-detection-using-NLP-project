{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import warnings\nwarnings.filterwarnings('ignore')\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport nltk\nimport re\nimport string\nfrom wordcloud import WordCloud\nfrom nltk.corpus import stopwords\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Embedding, LSTM, Conv1D, MaxPool1D\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, accuracy_score\n","metadata":{"execution":{"iopub.status.busy":"2023-10-13T12:50:20.588312Z","iopub.execute_input":"2023-10-13T12:50:20.588697Z","iopub.status.idle":"2023-10-13T12:50:20.595087Z","shell.execute_reply.started":"2023-10-13T12:50:20.588669Z","shell.execute_reply":"2023-10-13T12:50:20.594146Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_fake = pd.read_csv(\"/kaggle/input/fake-and-real-news-dataset/Fake.csv\")\ndf_True = pd.read_csv(\"/kaggle/input/fake-and-real-news-dataset/True.csv\")","metadata":{"execution":{"iopub.status.busy":"2023-10-13T12:50:20.596646Z","iopub.execute_input":"2023-10-13T12:50:20.597443Z","iopub.status.idle":"2023-10-13T12:50:21.962625Z","shell.execute_reply.started":"2023-10-13T12:50:20.597411Z","shell.execute_reply":"2023-10-13T12:50:21.961671Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_fake.head()","metadata":{"execution":{"iopub.status.busy":"2023-10-13T12:50:21.964325Z","iopub.execute_input":"2023-10-13T12:50:21.965058Z","iopub.status.idle":"2023-10-13T12:50:21.976083Z","shell.execute_reply.started":"2023-10-13T12:50:21.965022Z","shell.execute_reply":"2023-10-13T12:50:21.975017Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_True.head()","metadata":{"execution":{"iopub.status.busy":"2023-10-13T12:50:21.977784Z","iopub.execute_input":"2023-10-13T12:50:21.978478Z","iopub.status.idle":"2023-10-13T12:50:21.99185Z","shell.execute_reply.started":"2023-10-13T12:50:21.978439Z","shell.execute_reply":"2023-10-13T12:50:21.990837Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"text = ''\nfor news in df_fake.text.values:\n    text += f\" {news}\"\n    \nwordcloud = WordCloud(\n    width = 3000,\n    height = 2000,\n    background_color = 'black',\n    stopwords = set(nltk.corpus.stopwords.words(\"english\"))).generate(text)\n\nfig = plt.figure(\n    figsize = (40, 30),\n    facecolor = 'k',\n    edgecolor = 'k')\n\nplt.imshow(wordcloud, interpolation = 'bilinear')\nplt.axis('off')\nplt.tight_layout(pad=0)\nplt.show()\ndel text","metadata":{"execution":{"iopub.status.busy":"2023-10-13T12:50:21.994878Z","iopub.execute_input":"2023-10-13T12:50:21.995215Z","iopub.status.idle":"2023-10-13T12:51:01.296941Z","shell.execute_reply.started":"2023-10-13T12:50:21.995191Z","shell.execute_reply":"2023-10-13T12:51:01.295798Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"text = ''\nfor news in df_True.text.values:\n    text += f\" {news}\"\n    \nwordcloud = WordCloud(\n    width = 3000,\n    height = 2000,\n    background_color = 'black',\n    stopwords = set(nltk.corpus.stopwords.words(\"english\"))).generate(text)\n\nfig = plt.figure(\n    figsize = (40, 30),\n    facecolor = 'k',\n    edgecolor = 'k')\n\nplt.imshow(wordcloud, interpolation = 'bilinear')\nplt.axis('off')\nplt.tight_layout(pad=0)\nplt.show()\ndel text","metadata":{"execution":{"iopub.status.busy":"2023-10-13T12:51:01.298715Z","iopub.execute_input":"2023-10-13T12:51:01.299414Z","iopub.status.idle":"2023-10-13T12:51:38.582514Z","shell.execute_reply.started":"2023-10-13T12:51:01.29937Z","shell.execute_reply":"2023-10-13T12:51:38.58127Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"for news in df_True.text.values:\n    print(news)\n    break","metadata":{"execution":{"iopub.status.busy":"2023-10-13T12:51:38.583824Z","iopub.execute_input":"2023-10-13T12:51:38.584789Z","iopub.status.idle":"2023-10-13T12:51:38.590439Z","shell.execute_reply.started":"2023-10-13T12:51:38.584754Z","shell.execute_reply":"2023-10-13T12:51:38.589608Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_True['Type']=1\ndf_fake['Type']=0","metadata":{"execution":{"iopub.status.busy":"2023-10-13T12:51:38.59165Z","iopub.execute_input":"2023-10-13T12:51:38.592486Z","iopub.status.idle":"2023-10-13T12:51:38.603897Z","shell.execute_reply.started":"2023-10-13T12:51:38.592446Z","shell.execute_reply":"2023-10-13T12:51:38.602963Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_True.head()","metadata":{"execution":{"iopub.status.busy":"2023-10-13T12:51:38.605492Z","iopub.execute_input":"2023-10-13T12:51:38.605856Z","iopub.status.idle":"2023-10-13T12:51:38.625122Z","shell.execute_reply.started":"2023-10-13T12:51:38.605829Z","shell.execute_reply":"2023-10-13T12:51:38.624203Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_fake.head()","metadata":{"execution":{"iopub.status.busy":"2023-10-13T12:51:38.626682Z","iopub.execute_input":"2023-10-13T12:51:38.6273Z","iopub.status.idle":"2023-10-13T12:51:38.641906Z","shell.execute_reply.started":"2023-10-13T12:51:38.627259Z","shell.execute_reply":"2023-10-13T12:51:38.640935Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_True.drop(columns=['subject','date'],inplace = True)\ndf_fake.drop(columns=['subject','date'],inplace = True)","metadata":{"execution":{"iopub.status.busy":"2023-10-13T12:51:38.645999Z","iopub.execute_input":"2023-10-13T12:51:38.646621Z","iopub.status.idle":"2023-10-13T12:51:38.657514Z","shell.execute_reply.started":"2023-10-13T12:51:38.646586Z","shell.execute_reply":"2023-10-13T12:51:38.656709Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_True['text']= df_True['title'] + \" \" + df_True['text']\ndf_fake['text']= df_fake['title'] + \" \" + df_fake['text']\ndf_True.drop(columns=['title'],inplace=True)\ndf_fake.drop(columns=['title'],inplace=True)","metadata":{"execution":{"iopub.status.busy":"2023-10-13T12:51:38.659021Z","iopub.execute_input":"2023-10-13T12:51:38.659723Z","iopub.status.idle":"2023-10-13T12:51:38.810818Z","shell.execute_reply.started":"2023-10-13T12:51:38.659691Z","shell.execute_reply":"2023-10-13T12:51:38.809881Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_True.head()","metadata":{"execution":{"iopub.status.busy":"2023-10-13T12:51:38.812235Z","iopub.execute_input":"2023-10-13T12:51:38.812597Z","iopub.status.idle":"2023-10-13T12:51:38.82135Z","shell.execute_reply.started":"2023-10-13T12:51:38.812564Z","shell.execute_reply":"2023-10-13T12:51:38.820423Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_True.shape, df_fake.shape","metadata":{"execution":{"iopub.status.busy":"2023-10-13T12:51:38.822723Z","iopub.execute_input":"2023-10-13T12:51:38.823638Z","iopub.status.idle":"2023-10-13T12:51:38.833279Z","shell.execute_reply.started":"2023-10-13T12:51:38.823606Z","shell.execute_reply":"2023-10-13T12:51:38.832329Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pip install --upgrade pandas","metadata":{"execution":{"iopub.status.busy":"2023-10-13T12:51:38.834205Z","iopub.execute_input":"2023-10-13T12:51:38.83502Z","iopub.status.idle":"2023-10-13T12:51:52.784916Z","shell.execute_reply.started":"2023-10-13T12:51:38.834995Z","shell.execute_reply":"2023-10-13T12:51:52.78339Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df = pd.concat([df_True, df_fake], axis=0)\ndf.head()","metadata":{"execution":{"iopub.status.busy":"2023-10-13T12:51:52.786794Z","iopub.execute_input":"2023-10-13T12:51:52.787555Z","iopub.status.idle":"2023-10-13T12:51:52.852951Z","shell.execute_reply.started":"2023-10-13T12:51:52.787501Z","shell.execute_reply":"2023-10-13T12:51:52.851963Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.shape","metadata":{"execution":{"iopub.status.busy":"2023-10-13T12:51:52.854514Z","iopub.execute_input":"2023-10-13T12:51:52.854857Z","iopub.status.idle":"2023-10-13T12:51:52.861133Z","shell.execute_reply.started":"2023-10-13T12:51:52.854826Z","shell.execute_reply":"2023-10-13T12:51:52.859875Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Data cleaning","metadata":{}},{"cell_type":"code","source":"X = []\nstop_words = set(nltk.corpus.stopwords.words(\"english\"))\ntokenizer = nltk.tokenize.RegexpTokenizer(r'\\w+')\nfor par in df[\"text\"].values:\n    tmp = []\n    sentences = nltk.sent_tokenize(par)\n    for sent in sentences:\n        sent = sent.lower()\n        tokens = tokenizer.tokenize(sent)\n        filtered_words = [w.strip() for w in tokens if w not in stop_words and len(w) > 1]\n        tmp.extend(filtered_words)\n    X.append(tmp)","metadata":{"execution":{"iopub.status.busy":"2023-10-13T12:51:52.863119Z","iopub.execute_input":"2023-10-13T12:51:52.86384Z","iopub.status.idle":"2023-10-13T12:52:29.265835Z","shell.execute_reply.started":"2023-10-13T12:51:52.863807Z","shell.execute_reply":"2023-10-13T12:52:29.26491Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X","metadata":{"execution":{"iopub.status.busy":"2023-10-13T12:52:29.267327Z","iopub.execute_input":"2023-10-13T12:52:29.26768Z","iopub.status.idle":"2023-10-13T12:52:31.211648Z","shell.execute_reply.started":"2023-10-13T12:52:29.267646Z","shell.execute_reply":"2023-10-13T12:52:31.210833Z"},"collapsed":true,"jupyter":{"outputs_hidden":true},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Word Embedding ","metadata":{}},{"cell_type":"markdown","source":"## Word2Vec","metadata":{}},{"cell_type":"code","source":"import gensim","metadata":{"execution":{"iopub.status.busy":"2023-10-13T12:52:31.212853Z","iopub.execute_input":"2023-10-13T12:52:31.213663Z","iopub.status.idle":"2023-10-13T12:52:31.21769Z","shell.execute_reply.started":"2023-10-13T12:52:31.213629Z","shell.execute_reply":"2023-10-13T12:52:31.21695Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"EMBEDDING_DIM = 100\n\nw2v_model = gensim.models.Word2Vec(sentences=X, vector_size=EMBEDDING_DIM, window=5, min_count=1)","metadata":{"execution":{"iopub.status.busy":"2023-10-13T12:52:31.218825Z","iopub.execute_input":"2023-10-13T12:52:31.219696Z","iopub.status.idle":"2023-10-13T12:54:01.313965Z","shell.execute_reply.started":"2023-10-13T12:52:31.219668Z","shell.execute_reply":"2023-10-13T12:54:01.31297Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"len(w2v_model.wv.index_to_key)","metadata":{"execution":{"iopub.status.busy":"2023-10-13T12:54:01.315284Z","iopub.execute_input":"2023-10-13T12:54:01.315647Z","iopub.status.idle":"2023-10-13T12:54:01.321973Z","shell.execute_reply.started":"2023-10-13T12:54:01.315614Z","shell.execute_reply":"2023-10-13T12:54:01.321112Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"w2v_model.wv.index_to_key","metadata":{"execution":{"iopub.status.busy":"2023-10-13T12:54:01.323217Z","iopub.execute_input":"2023-10-13T12:54:01.324245Z","iopub.status.idle":"2023-10-13T12:54:01.344488Z","shell.execute_reply.started":"2023-10-13T12:54:01.324214Z","shell.execute_reply":"2023-10-13T12:54:01.343697Z"},"collapsed":true,"jupyter":{"outputs_hidden":true},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"w2v_model.wv.most_similar(\"trump\")","metadata":{"execution":{"iopub.status.busy":"2023-10-13T12:54:01.345868Z","iopub.execute_input":"2023-10-13T12:54:01.346437Z","iopub.status.idle":"2023-10-13T12:54:01.394086Z","shell.execute_reply.started":"2023-10-13T12:54:01.346407Z","shell.execute_reply":"2023-10-13T12:54:01.392948Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"w2v_model.wv['said']","metadata":{"execution":{"iopub.status.busy":"2023-10-13T12:54:01.399596Z","iopub.execute_input":"2023-10-13T12:54:01.402585Z","iopub.status.idle":"2023-10-13T12:54:01.416766Z","shell.execute_reply.started":"2023-10-13T12:54:01.402494Z","shell.execute_reply":"2023-10-13T12:54:01.415441Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"w2v_model.wv.most_similar(positive=[\"trump\",\"obama\", \"clinton\"])","metadata":{"execution":{"iopub.status.busy":"2023-10-13T12:54:01.418924Z","iopub.execute_input":"2023-10-13T12:54:01.419693Z","iopub.status.idle":"2023-10-13T12:54:01.441696Z","shell.execute_reply.started":"2023-10-13T12:54:01.419661Z","shell.execute_reply":"2023-10-13T12:54:01.440601Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.decomposition import PCA\nfrom sklearn.manifold import TSNE\ndef tsnescatterplot(model, word, list_names):\n    \"\"\" Plot in seaborn the results from the t-SNE dimensionality reduction algorithm of the vectors of a query word,\n    its list of most similar words, and a list of words.\n    \"\"\"\n    arrays = np.empty((0, 100), dtype='f')\n    word_labels = [word]\n    color_list  = ['red']\n\n    # adds the vector of the query word\n#     print((model.wv.__getitem__([word])).shape)\n    if model == 'w2v_model':\n        arrays = np.append(arrays, model.wv.__getitem__([word]), axis=0)\n    else:\n        arrays = np.append(arrays, model.__getitem__([word]), axis=0)\n    \n    # gets list of most similar words\n    if model == 'w2v_model':\n        close_words = model.wv.most_similar([word])\n    else:\n        close_words = model.most_similar([word])   \n    \n    # adds the vector for each of the closest words to the array\n    for wrd_score in close_words:\n        if model == 'w2v_model':\n            wrd_vector = model.wv.__getitem__([wrd_score[0]])\n        else:\n            wrd_vector = model.__getitem__([wrd_score[0]])\n            \n        word_labels.append(wrd_score[0])\n        color_list.append('blue')\n        arrays = np.append(arrays, wrd_vector, axis=0)\n    \n    # adds the vector for each of the words from list_names to the array\n    for wrd in list_names:\n        if model =='w2v_model':\n            wrd_vector = model.wv.__getitem__([wrd])\n        else:\n            wrd_vector = model.__getitem__([wrd])\n        word_labels.append(wrd)\n        color_list.append('green')\n        arrays = np.append(arrays, wrd_vector, axis=0)\n        \n    # Reduces the dimensionality from 100 to 19 dimensions with PCA\n    reduc = PCA(n_components=19).fit_transform(arrays)\n    \n    # Finds t-SNE coordinates for 2 dimensions\n    np.set_printoptions(suppress=True)\n    \n    Y = TSNE(n_components=2, random_state=0, perplexity=15).fit_transform(reduc)\n    \n    # Sets everything up to plot\n    df = pd.DataFrame({'x': [x for x in Y[:, 0]],\n                       'y': [y for y in Y[:, 1]],\n                       'words': word_labels,\n                       'color': color_list})\n    \n    fig, _ = plt.subplots()\n    fig.set_size_inches(9, 9)\n    \n    # Basic plot\n    p1 = sns.regplot(data=df,\n                     x=\"x\",\n                     y=\"y\",\n                     fit_reg=False,\n                     marker=\"o\",\n                     scatter_kws={'s': 40,\n                                  'facecolors': df['color']\n                                 }\n                    )\n    \n    # Adds annotations one by one with a loop\n    for line in range(0, df.shape[0]):\n         p1.text(df[\"x\"][line],\n                 df['y'][line],\n                 '  ' + df[\"words\"][line].title(),\n                 horizontalalignment='left',\n                 verticalalignment='bottom', size='medium',\n                 color=df['color'][line],\n                 weight='normal'\n                ).set_size(15)\n\n    \n    plt.xlim(Y[:, 0].min()-19, Y[:, 0].max()+19)\n    plt.ylim(Y[:, 1].min()-19, Y[:, 1].max()+19)\n            \n    plt.title('t-SNE visualization for {}'.format(word.title()))\n    ","metadata":{"execution":{"iopub.status.busy":"2023-10-13T13:07:46.171009Z","iopub.execute_input":"2023-10-13T13:07:46.171338Z","iopub.status.idle":"2023-10-13T13:07:46.183825Z","shell.execute_reply.started":"2023-10-13T13:07:46.17131Z","shell.execute_reply":"2023-10-13T13:07:46.182833Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"tsnescatterplot(w2v_model, 'trump', ['obama', 'clinton', 'iran', 'facebook', 'president','corona','crooked','incoming'])","metadata":{"execution":{"iopub.status.busy":"2023-10-13T12:54:01.481973Z","iopub.execute_input":"2023-10-13T12:54:01.482695Z","iopub.status.idle":"2023-10-13T12:54:02.119164Z","shell.execute_reply.started":"2023-10-13T12:54:01.482666Z","shell.execute_reply":"2023-10-13T12:54:02.118317Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"x_train,x_test,y_train,y_test = train_test_split(X,df.Type,test_size =0.2,random_state = 42)","metadata":{"execution":{"iopub.status.busy":"2023-10-13T12:54:02.123943Z","iopub.execute_input":"2023-10-13T12:54:02.124726Z","iopub.status.idle":"2023-10-13T12:54:02.147823Z","shell.execute_reply.started":"2023-10-13T12:54:02.124699Z","shell.execute_reply":"2023-10-13T12:54:02.146994Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from keras.preprocessing import text\n\nmax_features = 10000\n\ntokenizer = text.Tokenizer(num_words=max_features)\n\ntokenizer.fit_on_texts(x_train)\ntokenized_train = tokenizer.texts_to_sequences(x_train)","metadata":{"execution":{"iopub.status.busy":"2023-10-13T12:54:02.149131Z","iopub.execute_input":"2023-10-13T12:54:02.149454Z","iopub.status.idle":"2023-10-13T12:54:10.19048Z","shell.execute_reply.started":"2023-10-13T12:54:02.149424Z","shell.execute_reply":"2023-10-13T12:54:10.18956Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"max=0\nfor i in range(len(tokenized_train)):\n    if len(tokenized_train[i])> max:\n        max= len(tokenized_train[i])\nprint(max)","metadata":{"execution":{"iopub.status.busy":"2023-10-13T12:54:10.19307Z","iopub.execute_input":"2023-10-13T12:54:10.193337Z","iopub.status.idle":"2023-10-13T12:54:10.205999Z","shell.execute_reply.started":"2023-10-13T12:54:10.193315Z","shell.execute_reply":"2023-10-13T12:54:10.205059Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pip install --upgrade keras","metadata":{"execution":{"iopub.status.busy":"2023-10-13T12:54:10.208009Z","iopub.execute_input":"2023-10-13T12:54:10.208923Z","iopub.status.idle":"2023-10-13T12:54:18.628797Z","shell.execute_reply.started":"2023-10-13T12:54:10.208728Z","shell.execute_reply":"2023-10-13T12:54:18.627224Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from keras.utils import pad_sequences\nx_train = pad_sequences(tokenized_train, maxlen=max)\n\ntokenizer.fit_on_texts(x_test)\ntokenized_test = tokenizer.texts_to_sequences(x_test)\nX_test = pad_sequences(tokenized_test, maxlen=maxlen)\n","metadata":{"execution":{"iopub.status.busy":"2023-10-13T12:54:18.631154Z","iopub.execute_input":"2023-10-13T12:54:18.631545Z","iopub.status.idle":"2023-10-13T12:54:21.673493Z","shell.execute_reply.started":"2023-10-13T12:54:18.631493Z","shell.execute_reply":"2023-10-13T12:54:21.672559Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"word_index = tokenizer.word_index\nfor word, num in word_index.items():\n    print(f\"{word} -> {num}\")\n    if num == 10:\n        break    ","metadata":{"execution":{"iopub.status.busy":"2023-10-13T12:54:21.675066Z","iopub.execute_input":"2023-10-13T12:54:21.675737Z","iopub.status.idle":"2023-10-13T12:54:21.69349Z","shell.execute_reply.started":"2023-10-13T12:54:21.675703Z","shell.execute_reply":"2023-10-13T12:54:21.692422Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## GloVe","metadata":{}},{"cell_type":"code","source":"import gensim.downloader as api\nfrom gensim.models import KeyedVectors","metadata":{"execution":{"iopub.status.busy":"2023-10-13T13:07:14.188415Z","iopub.execute_input":"2023-10-13T13:07:14.188809Z","iopub.status.idle":"2023-10-13T13:07:14.192846Z","shell.execute_reply.started":"2023-10-13T13:07:14.188782Z","shell.execute_reply":"2023-10-13T13:07:14.191943Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"glove_model = api.load(\"glove-wiki-gigaword-100\")","metadata":{"execution":{"iopub.status.busy":"2023-10-13T13:21:34.878677Z","iopub.execute_input":"2023-10-13T13:21:34.87903Z","iopub.status.idle":"2023-10-13T13:22:00.517382Z","shell.execute_reply.started":"2023-10-13T13:21:34.879002Z","shell.execute_reply":"2023-10-13T13:22:00.516467Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"glove_model['said']","metadata":{"execution":{"iopub.status.busy":"2023-10-13T13:22:07.502821Z","iopub.execute_input":"2023-10-13T13:22:07.503147Z","iopub.status.idle":"2023-10-13T13:22:07.510514Z","shell.execute_reply.started":"2023-10-13T13:22:07.503121Z","shell.execute_reply":"2023-10-13T13:22:07.509298Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"glove_model.most_similar(\"trump\")","metadata":{"execution":{"iopub.status.busy":"2023-10-13T13:22:09.710774Z","iopub.execute_input":"2023-10-13T13:22:09.711103Z","iopub.status.idle":"2023-10-13T13:22:09.81406Z","shell.execute_reply.started":"2023-10-13T13:22:09.711076Z","shell.execute_reply":"2023-10-13T13:22:09.812581Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"glove_model.most_similar(\"president\")","metadata":{"execution":{"iopub.status.busy":"2023-10-13T13:22:28.315299Z","iopub.execute_input":"2023-10-13T13:22:28.315665Z","iopub.status.idle":"2023-10-13T13:22:28.352596Z","shell.execute_reply.started":"2023-10-13T13:22:28.315635Z","shell.execute_reply":"2023-10-13T13:22:28.351222Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"tsnescatterplot(embeddings_index, 'trump', ['obama', 'clinton', 'iran', 'facebook', 'president','corona','crooked','incoming'])","metadata":{"execution":{"iopub.status.busy":"2023-10-13T13:07:50.597804Z","iopub.execute_input":"2023-10-13T13:07:50.598154Z","iopub.status.idle":"2023-10-13T13:07:51.219045Z","shell.execute_reply.started":"2023-10-13T13:07:50.598126Z","shell.execute_reply":"2023-10-13T13:07:51.218192Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}