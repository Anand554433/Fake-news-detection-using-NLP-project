{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"**Fake News Detection**\n\nIt has become humanly impossible to identify fake news on the online portals across the globe.The sheer volume and the pace at which news spreads calls the need to create a ML model to classify the fake from true news.\n\nThe most crucial thing here is data which has been already available in the kaggle. We will be using different methods and compare the results.","metadata":{}},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2023-10-24T21:19:57.550035Z","iopub.execute_input":"2023-10-24T21:19:57.550545Z","iopub.status.idle":"2023-10-24T21:19:57.57099Z","shell.execute_reply.started":"2023-10-24T21:19:57.550506Z","shell.execute_reply":"2023-10-24T21:19:57.569361Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"!pip install gensim # Gensim is an open-source library for unsupervised topic modeling and natural language processing\nimport nltk\nnltk.download('punkt')\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom wordcloud import WordCloud, STOPWORDS\nimport nltk\nimport re\nfrom nltk.corpus import stopwords\nimport seaborn as sns \nimport gensim\nfrom gensim.utils import simple_preprocess\nfrom gensim.parsing.preprocessing import STOPWORDS\n\nimport plotly.express as px\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import confusion_matrix","metadata":{"execution":{"iopub.status.busy":"2023-10-24T21:19:57.573835Z","iopub.execute_input":"2023-10-24T21:19:57.574201Z","iopub.status.idle":"2023-10-24T21:20:12.475673Z","shell.execute_reply.started":"2023-10-24T21:19:57.574171Z","shell.execute_reply":"2023-10-24T21:20:12.474198Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Import the data & Clean ups**","metadata":{}},{"cell_type":"code","source":"#importing data\nfake_data = pd.read_csv('/kaggle/input/fake-and-real-news-dataset/Fake.csv')\nprint(\"fake_data\",fake_data.shape)\n\ntrue_data= pd.read_csv('/kaggle/input/fake-and-real-news-dataset/True.csv')\nprint(\"true_data\",true_data.shape)","metadata":{"execution":{"iopub.status.busy":"2023-10-24T21:20:12.47781Z","iopub.execute_input":"2023-10-24T21:20:12.478202Z","iopub.status.idle":"2023-10-24T21:20:14.041446Z","shell.execute_reply.started":"2023-10-24T21:20:12.47817Z","shell.execute_reply":"2023-10-24T21:20:14.039637Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"fake_data.head(5)","metadata":{"execution":{"iopub.status.busy":"2023-10-24T21:20:14.043858Z","iopub.execute_input":"2023-10-24T21:20:14.044369Z","iopub.status.idle":"2023-10-24T21:20:14.062753Z","shell.execute_reply.started":"2023-10-24T21:20:14.044308Z","shell.execute_reply":"2023-10-24T21:20:14.061396Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"true_data.head(5)","metadata":{"execution":{"iopub.status.busy":"2023-10-24T21:20:14.066765Z","iopub.execute_input":"2023-10-24T21:20:14.067278Z","iopub.status.idle":"2023-10-24T21:20:14.084087Z","shell.execute_reply.started":"2023-10-24T21:20:14.067224Z","shell.execute_reply":"2023-10-24T21:20:14.082523Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#adding additonal column to seperate betwee true & fake data\n# true =1, fake =0\ntrue_data['target'] = 1\nfake_data['target'] = 0\ndf = pd.concat([true_data, fake_data]).reset_index(drop = True)\ndf['original'] = df['title'] + ' ' + df['text']\ndf.head()","metadata":{"execution":{"iopub.status.busy":"2023-10-24T21:20:14.0866Z","iopub.execute_input":"2023-10-24T21:20:14.087151Z","iopub.status.idle":"2023-10-24T21:20:14.735855Z","shell.execute_reply.started":"2023-10-24T21:20:14.087106Z","shell.execute_reply":"2023-10-24T21:20:14.734379Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2023-10-24T21:20:14.737583Z","iopub.execute_input":"2023-10-24T21:20:14.737985Z","iopub.status.idle":"2023-10-24T21:20:14.7796Z","shell.execute_reply.started":"2023-10-24T21:20:14.737955Z","shell.execute_reply":"2023-10-24T21:20:14.778082Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Data Clean up**\n- create a function here that will be responsible to remove any unneccesary words (Stopwords) from the data provided","metadata":{}},{"cell_type":"code","source":"stop_words = stopwords.words('english')\nstop_words.extend(['from', 'subject', 're', 'edu', 'use'])\ndef preprocess(text):\n    result = []\n    for token in gensim.utils.simple_preprocess(text):\n        if token not in gensim.parsing.preprocessing.STOPWORDS and len(token) > 2 and token not in stop_words:\n            result.append(token)\n            \n    return result","metadata":{"execution":{"iopub.status.busy":"2023-10-24T21:20:14.781215Z","iopub.execute_input":"2023-10-24T21:20:14.781769Z","iopub.status.idle":"2023-10-24T21:20:14.791756Z","shell.execute_reply.started":"2023-10-24T21:20:14.781723Z","shell.execute_reply":"2023-10-24T21:20:14.790158Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Transforming the unmatching subjects to the same notation\ndf.subject=df.subject.replace({'politics':'PoliticsNews','politicsNews':'PoliticsNews'})","metadata":{"execution":{"iopub.status.busy":"2023-10-24T21:20:14.79379Z","iopub.execute_input":"2023-10-24T21:20:14.794206Z","iopub.status.idle":"2023-10-24T21:20:14.816885Z","shell.execute_reply.started":"2023-10-24T21:20:14.794175Z","shell.execute_reply":"2023-10-24T21:20:14.815736Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sub_tf_df=df.groupby('target').apply(lambda x:x['title'].count()).reset_index(name='Counts')\nsub_tf_df.target.replace({0:'False',1:'True'},inplace=True)\nfig = px.bar(sub_tf_df, x=\"target\", y=\"Counts\",\n             color='Counts', barmode='group',\n             height=350)\nfig.show()","metadata":{"execution":{"iopub.status.busy":"2023-10-24T21:20:14.819181Z","iopub.execute_input":"2023-10-24T21:20:14.81972Z","iopub.status.idle":"2023-10-24T21:20:14.936584Z","shell.execute_reply.started":"2023-10-24T21:20:14.819674Z","shell.execute_reply":"2023-10-24T21:20:14.935175Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"- The data looks balanced and no issues on building the model","metadata":{}},{"cell_type":"code","source":"sub_check=df.groupby('subject').apply(lambda x:x['title'].count()).reset_index(name='Counts')\nfig=px.bar(sub_check,x='subject',y='Counts',color='Counts',title='Count of News Articles by Subject')\nfig.show()","metadata":{"execution":{"iopub.status.busy":"2023-10-24T21:20:14.938929Z","iopub.execute_input":"2023-10-24T21:20:14.939455Z","iopub.status.idle":"2023-10-24T21:20:15.054994Z","shell.execute_reply.started":"2023-10-24T21:20:14.939403Z","shell.execute_reply":"2023-10-24T21:20:15.053436Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"df['clean_title'] = df['title'].apply(preprocess)\ndf['clean_title'][0]","metadata":{"execution":{"iopub.status.busy":"2023-10-24T21:20:15.056981Z","iopub.execute_input":"2023-10-24T21:20:15.057406Z","iopub.status.idle":"2023-10-24T21:20:18.392423Z","shell.execute_reply.started":"2023-10-24T21:20:15.057374Z","shell.execute_reply":"2023-10-24T21:20:18.391078Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df['clean_joined_title']=df['clean_title'].apply(lambda x:\" \".join(x))","metadata":{"execution":{"iopub.status.busy":"2023-10-24T21:20:18.393978Z","iopub.execute_input":"2023-10-24T21:20:18.394389Z","iopub.status.idle":"2023-10-24T21:20:18.43989Z","shell.execute_reply.started":"2023-10-24T21:20:18.394327Z","shell.execute_reply":"2023-10-24T21:20:18.43832Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize = (20,20)) \nwc = WordCloud(max_words = 2000 , width = 1600 , height = 800 , stopwords = stop_words).generate(\" \".join(df[df.target == 1].clean_joined_title))\nplt.imshow(wc, interpolation = 'bilinear')","metadata":{"execution":{"iopub.status.busy":"2023-10-24T21:20:18.444948Z","iopub.execute_input":"2023-10-24T21:20:18.445382Z","iopub.status.idle":"2023-10-24T21:20:40.056061Z","shell.execute_reply.started":"2023-10-24T21:20:18.445319Z","shell.execute_reply":"2023-10-24T21:20:40.054637Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"maxlen = -1\nfor doc in df.clean_joined_title:\n    tokens = nltk.word_tokenize(doc)\n    if(maxlen<len(tokens)):\n        maxlen = len(tokens)\nprint(\"The maximum number of words in a title is =\", maxlen)\nfig = px.histogram(x = [len(nltk.word_tokenize(x)) for x in df.clean_joined_title], nbins = 50)\nfig.show()","metadata":{"execution":{"iopub.status.busy":"2023-10-24T21:20:40.057751Z","iopub.execute_input":"2023-10-24T21:20:40.058123Z","iopub.status.idle":"2023-10-24T21:20:57.604598Z","shell.execute_reply.started":"2023-10-24T21:20:40.058095Z","shell.execute_reply":"2023-10-24T21:20:57.603031Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Creating Prediction Model**","metadata":{}},{"cell_type":"code","source":"X_train, X_test, y_train, y_test = train_test_split(df.clean_joined_title, df.target, test_size = 0.2,random_state=2)\nvec_train = CountVectorizer().fit(X_train)\nX_vec_train = vec_train.transform(X_train)\nX_vec_test = vec_train.transform(X_test)","metadata":{"execution":{"iopub.status.busy":"2023-10-24T21:20:57.606819Z","iopub.execute_input":"2023-10-24T21:20:57.60741Z","iopub.status.idle":"2023-10-24T21:20:59.132739Z","shell.execute_reply.started":"2023-10-24T21:20:57.607316Z","shell.execute_reply":"2023-10-24T21:20:59.13119Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#model \nmodel = LogisticRegression(C=2)\n\n#fit the model\nmodel.fit(X_vec_train, y_train)\npredicted_value = model.predict(X_vec_test)\n\n#accuracy & predicted value\naccuracy_value = roc_auc_score(y_test, predicted_value)\nprint(accuracy_value)","metadata":{"execution":{"iopub.status.busy":"2023-10-24T21:20:59.134487Z","iopub.execute_input":"2023-10-24T21:20:59.134963Z","iopub.status.idle":"2023-10-24T21:21:01.618204Z","shell.execute_reply.started":"2023-10-24T21:20:59.134921Z","shell.execute_reply":"2023-10-24T21:21:01.616748Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Create the confusion matrix**","metadata":{}},{"cell_type":"code","source":"cm = confusion_matrix(list(y_test), predicted_value)\nplt.figure(figsize = (7, 7))\nsns.heatmap(cm, annot = True,fmt='g',cmap='viridis')","metadata":{"execution":{"iopub.status.busy":"2023-10-24T21:21:01.621433Z","iopub.execute_input":"2023-10-24T21:21:01.6236Z","iopub.status.idle":"2023-10-24T21:21:02.053631Z","shell.execute_reply.started":"2023-10-24T21:21:01.623546Z","shell.execute_reply":"2023-10-24T21:21:02.052679Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"- 4465 Fake News have been Classified as Fake\n- 4045 Real News have been classified as Real","metadata":{}},{"cell_type":"markdown","source":"**Checking the content of news**","metadata":{}},{"cell_type":"code","source":"df['clean_text'] = df['text'].apply(preprocess)\ndf['clean_joined_text']=df['clean_text'].apply(lambda x:\" \".join(x))","metadata":{"execution":{"iopub.status.busy":"2023-10-24T21:21:02.055182Z","iopub.execute_input":"2023-10-24T21:21:02.055804Z","iopub.status.idle":"2023-10-24T21:22:28.720112Z","shell.execute_reply.started":"2023-10-24T21:21:02.055771Z","shell.execute_reply":"2023-10-24T21:22:28.718401Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize = (20,20)) \nwc = WordCloud(max_words = 2000 , width = 1600 , height = 800 , stopwords = stop_words).generate(\" \".join(df[df.target == 1].clean_joined_text))\nplt.imshow(wc, interpolation = 'bilinear')","metadata":{"execution":{"iopub.status.busy":"2023-10-24T21:22:28.723648Z","iopub.execute_input":"2023-10-24T21:22:28.725756Z","iopub.status.idle":"2023-10-24T21:23:30.621103Z","shell.execute_reply.started":"2023-10-24T21:22:28.725694Z","shell.execute_reply":"2023-10-24T21:23:30.619718Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"maxlen = -1\nfor doc in df.clean_joined_text:\n    tokens = nltk.word_tokenize(doc)\n    if(maxlen<len(tokens)):\n        maxlen = len(tokens)\nprint(\"The maximum number of words in a News Content is =\", maxlen)\nfig = px.histogram(x = [len(nltk.word_tokenize(x)) for x in df.clean_joined_text], nbins = 50)\nfig.show()\n","metadata":{"execution":{"iopub.status.busy":"2023-10-24T21:23:30.622781Z","iopub.execute_input":"2023-10-24T21:23:30.623201Z","iopub.status.idle":"2023-10-24T21:27:23.231123Z","shell.execute_reply.started":"2023-10-24T21:23:30.623168Z","shell.execute_reply":"2023-10-24T21:27:23.230026Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Predicting the Model**","metadata":{}},{"cell_type":"code","source":"X_train, X_test, y_train, y_test = train_test_split(df.clean_joined_text, df.target, test_size = 0.2,random_state=2)\nvec_train = CountVectorizer().fit(X_train)\nX_vec_train = vec_train.transform(X_train)\nX_vec_test = vec_train.transform(X_test)\nmodel = LogisticRegression(C=2.5)\nmodel.fit(X_vec_train, y_train)\npredicted_value = model.predict(X_vec_test)\naccuracy_value = roc_auc_score(y_test, predicted_value)\nprint(accuracy_value)","metadata":{"execution":{"iopub.status.busy":"2023-10-24T21:27:23.232691Z","iopub.execute_input":"2023-10-24T21:27:23.233527Z","iopub.status.idle":"2023-10-24T21:28:00.577564Z","shell.execute_reply.started":"2023-10-24T21:27:23.233487Z","shell.execute_reply":"2023-10-24T21:28:00.575404Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"prediction = []\nfor i in range(len(predicted_value)):\n    if predicted_value[i].item() > 0.5:\n        prediction.append(1)\n    else:\n        prediction.append(0)\ncm = confusion_matrix(list(y_test), prediction)\nplt.figure(figsize = (6, 6))\nsns.heatmap(cm, annot = True,fmt='g')","metadata":{"execution":{"iopub.status.busy":"2023-10-24T21:30:15.444444Z","iopub.execute_input":"2023-10-24T21:30:15.444945Z","iopub.status.idle":"2023-10-24T21:30:15.75856Z","shell.execute_reply.started":"2023-10-24T21:30:15.444914Z","shell.execute_reply":"2023-10-24T21:30:15.756964Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}